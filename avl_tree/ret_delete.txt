==========array[0]==========
Input Numbers : 95 66 73 97 83 35 79 78 28 80 

n -> key = 95
[avltree_insert, bstree_insert]
95 is a single node.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x2211010, t -> key = 95
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[Main]
95 is a single node.

n -> key = 66
[avltree_insert, bstree_insert]
95 is root, the type of node is ROOT, precursor 66.
66 is 95's left child, the type of node is LEAF, successor 95.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x2211010, t -> key = 95
[lost_balance_node] tmp -> key = 66( 0x2211040 )
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[Main]
95 is root, the type of node is ROOT, precursor 66.
66 is 95's left child, the type of node is LEAF, successor 95.

n -> key = 73
[avltree_insert, bstree_insert]
95 is root, the type of node is ROOT, precursor 73.
66 is 95's left child, the type of node is TRUNK, successor 73.
73 is 66's right child, the type of node is LEAF, precursor 66, successor 95.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x2211010, t -> key = 95
[lost_balance_node] tmp -> key = 73( 0x2211070 )
[lost_balance_node] tmp -> key = 66( 0x2211040 )
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[lost_balance_node]  found lost blance Node address is 0x2211010, value is 95
====================> k1 -> key  = 95
====================> get_node_height( k1 -> left  ) = 2
====================> get_node_height( k1 -> right  ) = 0
====================> get_node_height( k1 -> left -> right ) = 1
====================> get_node_height( k1 -> right ) = 0
[avltree_insert left right rotation]
[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 1
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 1
[left_right_rotation, left_rotation] k2 -> left = (nil)
[left_right_rotation, left_rotation] k1_has_left = 0
[left_right_rotation, left_rotation] k1 -> key = 66, k1 address = 0x2211040
[left_right_rotation, left_rotation] k2 -> key = 73, k2 address = 0x2211070
[left_right_rotation, left_rotation] stat = 0
[left_right_rotation, left_rotation] ret -> left = 0x2211040
[left_right_rotation, left_rotation] k2 -> left -> key = 66
[left_right_rotation, left_rotation] ret -> key = 73( 0x2211070 )
[left_right_rotation, left_rotation]
73 is 73's right child, the type of node is TRUNK, precursor 66.
66 is 73's left child, the type of node is LEAF, successor 73.

============[left_right_rotation]============
95 is root, the type of node is ROOT, precursor 73.
73 is 95's left child, the type of node is TRUNK, precursor 66, successor 95.
66 is 73's left child, the type of node is LEAF, successor 73.

[right_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 2
[right_rotation,  singel] k1 -> key = 95, k2 -> key = 73
[right_rotation]
73 is root, the type of node is ROOT, precursor 66, successor 95.
66 is 73's left child, the type of node is LEAF, successor 73.
95 is 73's right child, the type of node is LEAF, precursor 73.

[Main]
73 is root, the type of node is ROOT, precursor 66, successor 95.
66 is 73's left child, the type of node is LEAF, successor 73.
95 is 73's right child, the type of node is LEAF, precursor 73.

n -> key = 97
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 95.
66 is 73's left child, the type of node is LEAF, successor 73.
95 is 73's right child, the type of node is TRUNK, precursor 73, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 97( 0x22110a0 )
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
[Main]
73 is root, the type of node is ROOT, precursor 66, successor 95.
66 is 73's left child, the type of node is LEAF, successor 73.
95 is 73's right child, the type of node is TRUNK, precursor 73, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.

n -> key = 83
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 83.
66 is 73's left child, the type of node is LEAF, successor 73.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 83( 0x22110d0 )
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
[Main]
73 is root, the type of node is ROOT, precursor 66, successor 83.
66 is 73's left child, the type of node is LEAF, successor 73.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.

n -> key = 35
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 83.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is LEAF, successor 66.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 35( 0x2211100 )
[lost_balance_node] tmp -> key = 66( 0x2211040 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
[Main]
73 is root, the type of node is ROOT, precursor 66, successor 83.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is LEAF, successor 66.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.

n -> key = 79
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 79.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is LEAF, successor 66.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is TRUNK, precursor 79, successor 95.
79 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 3
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 79( 0x2211130 )
[lost_balance_node] tmp -> key = 83( 0x22110d0 )
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
[Main]
73 is root, the type of node is ROOT, precursor 66, successor 79.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is LEAF, successor 66.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is TRUNK, precursor 79, successor 95.
79 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
97 is 95's right child, the type of node is LEAF, precursor 95.

n -> key = 78
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 78.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is LEAF, successor 66.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is TRUNK, precursor 79, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 4
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 78( 0x2211160 )
[lost_balance_node] tmp -> key = 79( 0x2211130 )
[lost_balance_node] tmp -> key = 83( 0x22110d0 )
[lost_balance_node]  found lost blance Node address is 0x22110d0, value is 83
====================> k1 -> key  = 83
====================> get_node_height( k1 -> left  ) = 2
====================> get_node_height( k1 -> right  ) = 0
====================> get_node_height( k1 -> left -> right ) = 0
====================> get_node_height( k1 -> right ) = 0
[avltree_insert singel left rotation]
[right_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 3
[right_rotation,  singel] k1 -> key = 83, k2 -> key = 79
[right_rotation]
79 is 79's right child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
83 is 79's right child, the type of node is LEAF, precursor 79, successor 95.

[Main]
73 is root, the type of node is ROOT, precursor 66, successor 78.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is LEAF, successor 66.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
79 is 95's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
83 is 79's right child, the type of node is LEAF, precursor 79, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.

n -> key = 28
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 78.
66 is 73's left child, the type of node is TRUNK, precursor 35, successor 73.
35 is 66's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
79 is 95's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
83 is 79's right child, the type of node is LEAF, precursor 79, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 3
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 28( 0x2211190 )
[lost_balance_node] tmp -> key = 35( 0x2211100 )
[lost_balance_node] tmp -> key = 66( 0x2211040 )
[lost_balance_node]  found lost blance Node address is 0x2211040, value is 66
====================> k1 -> key  = 66
====================> get_node_height( k1 -> left  ) = 2
====================> get_node_height( k1 -> right  ) = 0
====================> get_node_height( k1 -> left -> right ) = 0
====================> get_node_height( k1 -> right ) = 0
[avltree_insert singel left rotation]
[right_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 3
[right_rotation,  singel] k1 -> key = 66, k2 -> key = 35
[right_rotation]
35 is 35's right child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.

[Main]
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
79 is 95's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
83 is 79's right child, the type of node is LEAF, precursor 79, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.

n -> key = 80
[avltree_insert, bstree_insert]
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
95 is 73's right child, the type of node is TRUNK, precursor 83, successor 97.
79 is 95's left child, the type of node is TRUNK, precursor 78, successor 80.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
83 is 79's right child, the type of node is TRUNK, precursor 80, successor 95.
80 is 83's left child, the type of node is LEAF, precursor 79, successor 83.
97 is 95's right child, the type of node is LEAF, precursor 95.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 4
[avltree_insert] t = 0x2211070, t -> key = 73
[lost_balance_node] tmp -> key = 80( 0x22111c0 )
[lost_balance_node] tmp -> key = 83( 0x22110d0 )
[lost_balance_node] tmp -> key = 79( 0x2211130 )
[lost_balance_node] tmp -> key = 95( 0x2211010 )
[lost_balance_node]  found lost blance Node address is 0x2211010, value is 95
====================> k1 -> key  = 95
====================> get_node_height( k1 -> left  ) = 3
====================> get_node_height( k1 -> right  ) = 1
====================> get_node_height( k1 -> left -> right ) = 2
====================> get_node_height( k1 -> right ) = 1
[avltree_insert left right rotation]
[left_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 1
[left_right_rotation, left_rotation] k2 -> left = 0x22111c0
[left_right_rotation, left_rotation] k1_has_left = 1
[left_right_rotation, left_rotation] k1 -> key = 79, k1 address = 0x2211130
[left_right_rotation, left_rotation] k2 -> key = 83, k2 address = 0x22110d0
[left_right_rotation, left_rotation] stat = 3
[left_right_rotation, left_rotation] ret -> left = 0x2211130
[left_right_rotation, left_rotation] k2 -> left -> key = 79
[left_right_rotation, left_rotation] ret -> key = 83( 0x22110d0 )
[left_right_rotation, left_rotation]
83 is 83's right child, the type of node is TRUNK, precursor 80.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 80.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
80 is 79's right child, the type of node is LEAF, precursor 79, successor 83.

============[left_right_rotation]============
95 is 95's right child, the type of node is TRUNK, precursor 83, successor 97.
83 is 95's left child, the type of node is TRUNK, precursor 80, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 80.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
80 is 79's right child, the type of node is LEAF, precursor 79, successor 83.
97 is 95's right child, the type of node is LEAF, precursor 95.

[right_rotation] get_node_height( k1 -> right ) = 3, get_node_height( k1 -> left ) = 1
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 4
[right_rotation,  singel] k1 -> key = 95, k2 -> key = 83
<=======================>
[right_rotation]
83 is 83's right child, the type of node is TRUNK, precursor 80, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 80.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
80 is 79's right child, the type of node is LEAF, precursor 79, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.

[Main]
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 80, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 80.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
80 is 79's right child, the type of node is LEAF, precursor 79, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.

idx = 9, key = 80
===============================> Before delete Node( 80 )
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 80, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 80.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
80 is 79's right child, the type of node is LEAF, precursor 79, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[delete_avltree] n_father -> key = 79
80 's type 4
[delete_avltree, bstree_delete]
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 79, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[lost_balance_node] tmp -> key = 79( 0x2211130 )
[lost_balance_node] tmp -> key = 83( 0x22110d0 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
===============================> After delete Node( 80 ):
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 79, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
idx = 6, key = 79
===============================> Before delete Node( 79 )
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 79, successor 95.
79 is 83's left child, the type of node is TRUNK, precursor 78, successor 83.
78 is 79's left child, the type of node is LEAF, precursor 73, successor 79.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[delete_avltree] n_father -> key = 83
79 's type 3
[delete_avltree, bstree_delete]
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 78, successor 95.
78 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[lost_balance_node] tmp -> key = 83( 0x22110d0 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
===============================> After delete Node( 79 ):
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 78, successor 95.
78 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
idx = 1, key = 66
===============================> Before delete Node( 66 )
73 is root, the type of node is ROOT, precursor 66, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 66.
28 is 35's left child, the type of node is LEAF, successor 35.
66 is 35's right child, the type of node is LEAF, precursor 35, successor 73.
83 is 73's right child, the type of node is TRUNK, precursor 78, successor 95.
78 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[delete_avltree] n_father -> key = 35
66 's type 4
[delete_avltree, bstree_delete]
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
83 is 73's right child, the type of node is TRUNK, precursor 78, successor 95.
78 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[lost_balance_node] tmp -> key = 35( 0x2211100 )
[lost_balance_node] tmp -> key = 73( 0x2211070 )
===============================> After delete Node( 66 ):
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
83 is 73's right child, the type of node is TRUNK, precursor 78, successor 95.
78 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
idx = 4, key = 83
===============================> Before delete Node( 83 )
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
83 is 73's right child, the type of node is TRUNK, precursor 78, successor 95.
78 is 83's left child, the type of node is LEAF, precursor 73, successor 83.
95 is 83's right child, the type of node is TRUNK, precursor 83, successor 97.
97 is 95's right child, the type of node is LEAF, precursor 95.
[delete_avltree] n_father -> key = 73
83 's type 3
[delete_avltree, bstree_delete]
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
95 is 73's right child, the type of node is TRUNK, precursor 78, successor 97.
78 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
[lost_balance_node] tmp -> key = 73( 0x2211070 )
===============================> After delete Node( 83 ):
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
95 is 73's right child, the type of node is TRUNK, precursor 78, successor 97.
78 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
idx = 6, key = 79
===============================> Before delete Node( 79 )
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
95 is 73's right child, the type of node is TRUNK, precursor 78, successor 97.
78 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
[delete_avltree] the Node( 79 ) is not found!
===============================> After delete Node( 79 ):
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
95 is 73's right child, the type of node is TRUNK, precursor 78, successor 97.
78 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
idx = 0, key = 95
===============================> Before delete Node( 95 )
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
95 is 73's right child, the type of node is TRUNK, precursor 78, successor 97.
78 is 95's left child, the type of node is LEAF, precursor 73, successor 95.
97 is 95's right child, the type of node is LEAF, precursor 95.
[delete_avltree] n_father -> key = 73
95 's type 3
[delete_avltree, bstree_delete]
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
97 is 73's right child, the type of node is TRUNK, precursor 78.
78 is 97's left child, the type of node is LEAF, precursor 73, successor 97.
[lost_balance_node] tmp -> key = 73( 0x2211070 )
===============================> After delete Node( 95 ):
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
97 is 73's right child, the type of node is TRUNK, precursor 78.
78 is 97's left child, the type of node is LEAF, precursor 73, successor 97.
idx = 1, key = 66
===============================> Before delete Node( 66 )
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
97 is 73's right child, the type of node is TRUNK, precursor 78.
78 is 97's left child, the type of node is LEAF, precursor 73, successor 97.
[delete_avltree] the Node( 66 ) is not found!
===============================> After delete Node( 66 ):
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
97 is 73's right child, the type of node is TRUNK, precursor 78.
78 is 97's left child, the type of node is LEAF, precursor 73, successor 97.
idx = 3, key = 97
===============================> Before delete Node( 97 )
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
97 is 73's right child, the type of node is TRUNK, precursor 78.
78 is 97's left child, the type of node is LEAF, precursor 73, successor 97.
[delete_avltree] n_father -> key = 73
97 's type 3
[delete_avltree, bstree_delete]
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
78 is 73's right child, the type of node is LEAF, precursor 73.
[lost_balance_node] tmp -> key = 73( 0x2211070 )
===============================> After delete Node( 97 ):
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
78 is 73's right child, the type of node is LEAF, precursor 73.
idx = 2, key = 73
===============================> Before delete Node( 73 )
73 is root, the type of node is ROOT, precursor 35, successor 78.
35 is 73's left child, the type of node is TRUNK, precursor 28, successor 73.
28 is 35's left child, the type of node is LEAF, successor 35.
78 is 73's right child, the type of node is LEAF, precursor 73.
73 's type 2
[delete_avltree, bstree_delete]
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
===============================> After delete Node( 73 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 9, key = 80
===============================> Before delete Node( 80 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] the Node( 80 ) is not found!
===============================> After delete Node( 80 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 0, key = 95
===============================> Before delete Node( 95 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] the Node( 95 ) is not found!
===============================> After delete Node( 95 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 6, key = 79
===============================> Before delete Node( 79 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] the Node( 79 ) is not found!
===============================> After delete Node( 79 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
idx = 8, key = 28
===============================> Before delete Node( 28 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is TRUNK, precursor 28, successor 78.
28 is 35's left child, the type of node is LEAF, successor 35.
[delete_avltree] n_father -> key = 35
28 's type 4
[delete_avltree, bstree_delete]
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[lost_balance_node] tmp -> key = 35( 0x2211100 )
[lost_balance_node] tmp -> key = 78( 0x2211070 )
===============================> After delete Node( 28 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 1, key = 66
===============================> Before delete Node( 66 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] the Node( 66 ) is not found!
===============================> After delete Node( 66 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 4, key = 83
===============================> Before delete Node( 83 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] the Node( 83 ) is not found!
===============================> After delete Node( 83 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 0, key = 95
===============================> Before delete Node( 95 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] the Node( 95 ) is not found!
===============================> After delete Node( 95 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 0, key = 95
===============================> Before delete Node( 95 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] the Node( 95 ) is not found!
===============================> After delete Node( 95 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 2, key = 73
===============================> Before delete Node( 73 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] the Node( 73 ) is not found!
===============================> After delete Node( 73 ):
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
idx = 5, key = 35
===============================> Before delete Node( 35 )
78 is root, the type of node is ROOT, precursor 35.
35 is 78's left child, the type of node is LEAF, successor 78.
[delete_avltree] n_father -> key = 78
35 's type 4
[delete_avltree, bstree_delete]
78 is a single node.
[lost_balance_node] tmp -> key = 78( 0x2211070 )
===============================> After delete Node( 35 ):
78 is a single node.
idx = 0, key = 95
===============================> Before delete Node( 95 )
78 is a single node.
[delete_avltree] the Node( 95 ) is not found!
===============================> After delete Node( 95 ):
78 is a single node.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is a single node.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is a single node.
idx = 5, key = 35
===============================> Before delete Node( 35 )
78 is a single node.
[delete_avltree] the Node( 35 ) is not found!
===============================> After delete Node( 35 ):
78 is a single node.
idx = 4, key = 83
===============================> Before delete Node( 83 )
78 is a single node.
[delete_avltree] the Node( 83 ) is not found!
===============================> After delete Node( 83 ):
78 is a single node.
idx = 2, key = 73
===============================> Before delete Node( 73 )
78 is a single node.
[delete_avltree] the Node( 73 ) is not found!
===============================> After delete Node( 73 ):
78 is a single node.
idx = 2, key = 73
===============================> Before delete Node( 73 )
78 is a single node.
[delete_avltree] the Node( 73 ) is not found!
===============================> After delete Node( 73 ):
78 is a single node.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is a single node.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is a single node.
idx = 3, key = 97
===============================> Before delete Node( 97 )
78 is a single node.
[delete_avltree] the Node( 97 ) is not found!
===============================> After delete Node( 97 ):
78 is a single node.
idx = 1, key = 66
===============================> Before delete Node( 66 )
78 is a single node.
[delete_avltree] the Node( 66 ) is not found!
===============================> After delete Node( 66 ):
78 is a single node.
idx = 2, key = 73
===============================> Before delete Node( 73 )
78 is a single node.
[delete_avltree] the Node( 73 ) is not found!
===============================> After delete Node( 73 ):
78 is a single node.
idx = 6, key = 79
===============================> Before delete Node( 79 )
78 is a single node.
[delete_avltree] the Node( 79 ) is not found!
===============================> After delete Node( 79 ):
78 is a single node.
idx = 7, key = 78
===============================> Before delete Node( 78 )
78 is a single node.
78 's type 1
===============================> After delete Node( 78 ):
the AvlTree is empty!
==========array[1]==========
Input Numbers : 75 37 85 28 84 33 93 17 65 57 

n -> key = 75
[avltree_insert, bstree_insert]
75 is a single node.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is a single node.

n -> key = 37
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37.
37 is 75's left child, the type of node is LEAF, successor 75.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 37( 0x2211100 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 37.
37 is 75's left child, the type of node is LEAF, successor 75.

n -> key = 85
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37, successor 85.
37 is 75's left child, the type of node is LEAF, successor 75.
85 is 75's right child, the type of node is LEAF, precursor 75.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 1
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 85( 0x2211190 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 37, successor 85.
37 is 75's left child, the type of node is LEAF, successor 75.
85 is 75's right child, the type of node is LEAF, precursor 75.

n -> key = 28
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37, successor 85.
37 is 75's left child, the type of node is TRUNK, precursor 28, successor 75.
28 is 37's left child, the type of node is LEAF, successor 37.
85 is 75's right child, the type of node is LEAF, precursor 75.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 1
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 28( 0x22110d0 )
[lost_balance_node] tmp -> key = 37( 0x2211100 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 37, successor 85.
37 is 75's left child, the type of node is TRUNK, precursor 28, successor 75.
28 is 37's left child, the type of node is LEAF, successor 37.
85 is 75's right child, the type of node is LEAF, precursor 75.

n -> key = 84
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37, successor 84.
37 is 75's left child, the type of node is TRUNK, precursor 28, successor 75.
28 is 37's left child, the type of node is LEAF, successor 37.
85 is 75's right child, the type of node is TRUNK, precursor 84.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 84( 0x2211130 )
[lost_balance_node] tmp -> key = 85( 0x2211190 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 37, successor 84.
37 is 75's left child, the type of node is TRUNK, precursor 28, successor 75.
28 is 37's left child, the type of node is LEAF, successor 37.
85 is 75's right child, the type of node is TRUNK, precursor 84.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.

n -> key = 33
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37, successor 84.
37 is 75's left child, the type of node is TRUNK, precursor 33, successor 75.
28 is 37's left child, the type of node is TRUNK, successor 33.
33 is 28's right child, the type of node is LEAF, precursor 28, successor 37.
85 is 75's right child, the type of node is TRUNK, precursor 84.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 33( 0x22110a0 )
[lost_balance_node] tmp -> key = 28( 0x22110d0 )
[lost_balance_node] tmp -> key = 37( 0x2211100 )
[lost_balance_node]  found lost blance Node address is 0x2211100, value is 37
====================> k1 -> key  = 37
====================> get_node_height( k1 -> left  ) = 2
====================> get_node_height( k1 -> right  ) = 0
====================> get_node_height( k1 -> left -> right ) = 1
====================> get_node_height( k1 -> right ) = 0
[avltree_insert left right rotation]
[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 1
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 1
[left_right_rotation, left_rotation] k2 -> left = (nil)
[left_right_rotation, left_rotation] k1_has_left = 0
[left_right_rotation, left_rotation] k1 -> key = 28, k1 address = 0x22110d0
[left_right_rotation, left_rotation] k2 -> key = 33, k2 address = 0x22110a0
[left_right_rotation, left_rotation] stat = 0
[left_right_rotation, left_rotation] ret -> left = 0x22110d0
[left_right_rotation, left_rotation] k2 -> left -> key = 28
[left_right_rotation, left_rotation] ret -> key = 33( 0x22110a0 )
[left_right_rotation, left_rotation]
33 is 33's right child, the type of node is TRUNK, precursor 28, successor 75.
28 is 33's left child, the type of node is LEAF, successor 33.

============[left_right_rotation]============
37 is 37's right child, the type of node is TRUNK, precursor 33, successor 75.
33 is 37's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is LEAF, successor 33.

[right_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 3
[right_rotation,  singel] k1 -> key = 37, k2 -> key = 33
[right_rotation]
33 is 33's right child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is LEAF, successor 33.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 75.

[Main]
75 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is LEAF, successor 33.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.

n -> key = 93
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is LEAF, successor 33.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 93( 0x2211010 )
[lost_balance_node] tmp -> key = 85( 0x2211190 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is LEAF, successor 33.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.

n -> key = 17
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 17( 0x2211040 )
[lost_balance_node] tmp -> key = 28( 0x22110d0 )
[lost_balance_node] tmp -> key = 33( 0x22110a0 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.

n -> key = 65
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 65, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is TRUNK, precursor 33, successor 65.
65 is 37's right child, the type of node is LEAF, precursor 37, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 65( 0x2211160 )
[lost_balance_node] tmp -> key = 37( 0x2211100 )
[lost_balance_node] tmp -> key = 33( 0x22110a0 )
[lost_balance_node] tmp -> key = 75( 0x2211070 )
[Main]
75 is root, the type of node is ROOT, precursor 65, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is TRUNK, precursor 33, successor 65.
65 is 37's right child, the type of node is LEAF, precursor 37, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.

n -> key = 57
[avltree_insert, bstree_insert]
75 is root, the type of node is ROOT, precursor 65, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is TRUNK, precursor 33, successor 57.
65 is 37's right child, the type of node is TRUNK, precursor 57, successor 75.
57 is 65's left child, the type of node is LEAF, precursor 37, successor 65.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.
[avltree_insert] get_node_height( t -> left ) = 4
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211070, t -> key = 75
[lost_balance_node] tmp -> key = 57( 0x22111c0 )
[lost_balance_node] tmp -> key = 65( 0x2211160 )
[lost_balance_node] tmp -> key = 37( 0x2211100 )
[lost_balance_node]  found lost blance Node address is 0x2211100, value is 37
====================> k1 -> key  = 37
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 1
====================> get_node_height( k1 -> left ) = 0
[avltree_insert right left rotation]
[right_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 1
[right_rotation]  type = 4
[right_left_rotation, right_rotation] k1_has_right = 0
[right_left_rotation, right_rotation]  k1 -> key = 65, k1 address = 0x2211160
[right_left_rotation, right_rotation]  k2 -> key = 57, k2 address = 0x22111c0
[right_left_rotation, right_rotation] stat = 0
[right_left_rotation, right_rotation] ret -> key = 57( 0x22111c0 )
[right_left_rotation, right_rotation]
57 is 57's right child, the type of node is TRUNK, precursor 33, successor 65.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 75.

============[right_left_rotation]============
37 is 37's right child, the type of node is TRUNK, precursor 33, successor 57.
57 is 37's right child, the type of node is TRUNK, precursor 37, successor 65.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 75.

[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
57 is 57's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 75.

[Main]
75 is root, the type of node is ROOT, precursor 65, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.

idx = 0, key = 75
===============================> Before delete Node( 75 )
75 is root, the type of node is ROOT, precursor 65, successor 84.
33 is 75's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 75.
85 is 75's right child, the type of node is TRUNK, precursor 84, successor 93.
84 is 85's left child, the type of node is LEAF, precursor 75, successor 85.
93 is 85's right child, the type of node is LEAF, precursor 85.
75 's type 2
[delete_avltree, bstree_delete]
84 is root, the type of node is ROOT, precursor 65, successor 85.
33 is 84's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is TRUNK, precursor 84, successor 93.
93 is 85's right child, the type of node is LEAF, precursor 85.
===============================> After delete Node( 75 ):
84 is root, the type of node is ROOT, precursor 65, successor 85.
33 is 84's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is TRUNK, precursor 84, successor 93.
93 is 85's right child, the type of node is LEAF, precursor 85.
idx = 6, key = 93
===============================> Before delete Node( 93 )
84 is root, the type of node is ROOT, precursor 65, successor 85.
33 is 84's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is TRUNK, precursor 84, successor 93.
93 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 85
93 's type 4
[delete_avltree, bstree_delete]
84 is root, the type of node is ROOT, precursor 65, successor 85.
33 is 84's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 65.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is LEAF, precursor 84.
[lost_balance_node] tmp -> key = 85( 0x2211190 )
[lost_balance_node] tmp -> key = 84( 0x2211070 )
[lost_balance_node]  found lost blance Node address is 0x2211070, value is 84
====================> k1 -> key  = 84
====================> get_node_height( k1 -> left  ) = 3
====================> get_node_height( k1 -> right  ) = 1
====================> get_node_height( k1 -> left -> right ) = 2
====================> get_node_height( k1 -> right ) = 1
[delete_avltree left right rotation]
[left_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 0
[left_right_rotation, left_rotation] k2 -> left = 0x2211100
[left_right_rotation, left_rotation] k1_has_left = 1
[left_right_rotation, left_rotation] k1 -> key = 33, k1 address = 0x22110a0
[left_right_rotation, left_rotation] k2 -> key = 57, k2 address = 0x22111c0
[left_right_rotation, left_rotation] stat = 3
[left_right_rotation, left_rotation] ret -> left = 0x22110a0
[left_right_rotation, left_rotation] k2 -> left -> key = 33
[left_right_rotation, left_rotation] ret -> key = 57( 0x22111c0 )
[left_right_rotation, left_rotation]
57 is 57's right child, the type of node is TRUNK, precursor 37, successor 65.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57.

============[left_right_rotation]============
84 is root, the type of node is ROOT, precursor 65, successor 85.
57 is 84's left child, the type of node is TRUNK, precursor 37, successor 65.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
65 is 57's right child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is LEAF, precursor 84.

[right_rotation] get_node_height( k1 -> right ) = 4, get_node_height( k1 -> left ) = 1
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 3
[right_rotation]  type = 2
[right_left_rotation, right_rotation] k1_has_right = 1
[right_left_rotation, right_rotation]  k1 -> key = 84, k1 address = 0x2211070
[right_left_rotation, right_rotation]  k2 -> key = 57, k2 address = 0x22111c0
[right_left_rotation, right_rotation] stat = 4
[right_left_rotation, right_rotation] ret -> key = 57( 0x22111c0 )
[right_left_rotation, right_rotation]
57 is root, the type of node is ROOT, precursor 37, successor 65.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
84 is 57's right child, the type of node is TRUNK, precursor 65, successor 85.
65 is 84's left child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is LEAF, precursor 84.

===============================> After delete Node( 93 ):
57 is root, the type of node is ROOT, precursor 37, successor 65.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
84 is 57's right child, the type of node is TRUNK, precursor 65, successor 85.
65 is 84's left child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is LEAF, precursor 84.
idx = 8, key = 65
===============================> Before delete Node( 65 )
57 is root, the type of node is ROOT, precursor 37, successor 65.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
84 is 57's right child, the type of node is TRUNK, precursor 65, successor 85.
65 is 84's left child, the type of node is LEAF, precursor 57, successor 84.
85 is 84's right child, the type of node is LEAF, precursor 84.
[delete_avltree] n_father -> key = 84
65 's type 4
[delete_avltree, bstree_delete]
57 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
84 is 57's right child, the type of node is TRUNK, precursor 57, successor 85.
85 is 84's right child, the type of node is LEAF, precursor 84.
[lost_balance_node] tmp -> key = 84( 0x2211070 )
[lost_balance_node] tmp -> key = 57( 0x22111c0 )
===============================> After delete Node( 65 ):
57 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
84 is 57's right child, the type of node is TRUNK, precursor 57, successor 85.
85 is 84's right child, the type of node is LEAF, precursor 84.
idx = 4, key = 84
===============================> Before delete Node( 84 )
57 is root, the type of node is ROOT, precursor 37, successor 84.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
84 is 57's right child, the type of node is TRUNK, precursor 57, successor 85.
85 is 84's right child, the type of node is LEAF, precursor 84.
[delete_avltree] n_father -> key = 57
84 's type 3
[delete_avltree, bstree_delete]
57 is root, the type of node is ROOT, precursor 37, successor 85.
33 is 57's left child, the type of node is TRUNK, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
37 is 33's right child, the type of node is LEAF, precursor 33, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
[lost_balance_node] tmp -> key = 57( 0x22111c0 )
[lost_balance_node]  found lost blance Node address is 0x22111c0, value is 57
====================> k1 -> key  = 57
====================> get_node_height( k1 -> left  ) = 3
====================> get_node_height( k1 -> right  ) = 1
====================> get_node_height( k1 -> left -> right ) = 1
====================> get_node_height( k1 -> right ) = 1
[delete_avltree singel left rotation]
[right_rotation] get_node_height( k1 -> right ) = 3, get_node_height( k1 -> left ) = 1
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 2
[right_rotation,  singel] k1 -> key = 57, k2 -> key = 33
[right_rotation]
33 is root, the type of node is ROOT, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 85.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.

===============================> After delete Node( 84 ):
33 is root, the type of node is ROOT, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 85.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 1, key = 37
===============================> Before delete Node( 37 )
33 is root, the type of node is ROOT, precursor 28, successor 37.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 37, successor 85.
37 is 57's left child, the type of node is LEAF, precursor 33, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] n_father -> key = 57
37 's type 4
[delete_avltree, bstree_delete]
33 is root, the type of node is ROOT, precursor 28, successor 57.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[lost_balance_node] tmp -> key = 57( 0x22111c0 )
[lost_balance_node] tmp -> key = 33( 0x22110a0 )
===============================> After delete Node( 37 ):
33 is root, the type of node is ROOT, precursor 28, successor 57.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 3, key = 28
===============================> Before delete Node( 28 )
33 is root, the type of node is ROOT, precursor 28, successor 57.
28 is 33's left child, the type of node is TRUNK, precursor 17, successor 33.
17 is 28's left child, the type of node is LEAF, successor 28.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] n_father -> key = 33
28 's type 3
[delete_avltree, bstree_delete]
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[lost_balance_node] tmp -> key = 33( 0x22110a0 )
===============================> After delete Node( 28 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 3, key = 28
===============================> Before delete Node( 28 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 28 ) is not found!
===============================> After delete Node( 28 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 1, key = 37
===============================> Before delete Node( 37 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 37 ) is not found!
===============================> After delete Node( 37 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 6, key = 93
===============================> Before delete Node( 93 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 93 ) is not found!
===============================> After delete Node( 93 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 1, key = 37
===============================> Before delete Node( 37 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 37 ) is not found!
===============================> After delete Node( 37 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 6, key = 93
===============================> Before delete Node( 93 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 93 ) is not found!
===============================> After delete Node( 93 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 4, key = 84
===============================> Before delete Node( 84 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 84 ) is not found!
===============================> After delete Node( 84 ):
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 5, key = 33
===============================> Before delete Node( 33 )
33 is root, the type of node is ROOT, precursor 17, successor 57.
17 is 33's left child, the type of node is LEAF, successor 33.
57 is 33's right child, the type of node is TRUNK, precursor 33, successor 85.
85 is 57's right child, the type of node is LEAF, precursor 57.
33 's type 2
[delete_avltree, bstree_delete]
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
===============================> After delete Node( 33 ):
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 0, key = 75
===============================> Before delete Node( 75 )
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 75 ) is not found!
===============================> After delete Node( 75 ):
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 5, key = 33
===============================> Before delete Node( 33 )
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 33 ) is not found!
===============================> After delete Node( 33 ):
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 8, key = 65
===============================> Before delete Node( 65 )
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 65 ) is not found!
===============================> After delete Node( 65 ):
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 0, key = 75
===============================> Before delete Node( 75 )
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
[delete_avltree] the Node( 75 ) is not found!
===============================> After delete Node( 75 ):
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
idx = 9, key = 57
===============================> Before delete Node( 57 )
57 is root, the type of node is ROOT, precursor 17, successor 85.
17 is 57's left child, the type of node is LEAF, successor 57.
85 is 57's right child, the type of node is LEAF, precursor 57.
57 's type 2
[delete_avltree, bstree_delete]
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
===============================> After delete Node( 57 ):
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
idx = 3, key = 28
===============================> Before delete Node( 28 )
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
[delete_avltree] the Node( 28 ) is not found!
===============================> After delete Node( 28 ):
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
idx = 0, key = 75
===============================> Before delete Node( 75 )
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
[delete_avltree] the Node( 75 ) is not found!
===============================> After delete Node( 75 ):
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
idx = 4, key = 84
===============================> Before delete Node( 84 )
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
[delete_avltree] the Node( 84 ) is not found!
===============================> After delete Node( 84 ):
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
idx = 1, key = 37
===============================> Before delete Node( 37 )
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
[delete_avltree] the Node( 37 ) is not found!
===============================> After delete Node( 37 ):
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
idx = 6, key = 93
===============================> Before delete Node( 93 )
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
[delete_avltree] the Node( 93 ) is not found!
===============================> After delete Node( 93 ):
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
idx = 7, key = 17
===============================> Before delete Node( 17 )
85 is root, the type of node is ROOT, precursor 17.
17 is 85's left child, the type of node is LEAF, successor 85.
[delete_avltree] n_father -> key = 85
17 's type 4
[delete_avltree, bstree_delete]
85 is a single node.
[lost_balance_node] tmp -> key = 85( 0x22110a0 )
===============================> After delete Node( 17 ):
85 is a single node.
idx = 3, key = 28
===============================> Before delete Node( 28 )
85 is a single node.
[delete_avltree] the Node( 28 ) is not found!
===============================> After delete Node( 28 ):
85 is a single node.
idx = 2, key = 85
===============================> Before delete Node( 85 )
85 is a single node.
85 's type 1
===============================> After delete Node( 85 ):
the AvlTree is empty!
==========array[2]==========
Input Numbers : 30 74 84 26 35 89 22 63 59 85 

n -> key = 30
[avltree_insert, bstree_insert]
30 is a single node.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x22110a0, t -> key = 30
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[Main]
30 is a single node.

n -> key = 74
[avltree_insert, bstree_insert]
30 is root, the type of node is ROOT, successor 74.
74 is 30's right child, the type of node is LEAF, precursor 30.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 1
[avltree_insert] t = 0x22110a0, t -> key = 30
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[Main]
30 is root, the type of node is ROOT, successor 74.
74 is 30's right child, the type of node is LEAF, precursor 30.

n -> key = 84
[avltree_insert, bstree_insert]
30 is root, the type of node is ROOT, successor 74.
74 is 30's right child, the type of node is TRUNK, precursor 30, successor 84.
84 is 74's right child, the type of node is LEAF, precursor 74.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110a0, t -> key = 30
[lost_balance_node] tmp -> key = 84( 0x2211070 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node]  found lost blance Node address is 0x22110a0, value is 30
====================> k1 -> key  = 30
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 0
====================> get_node_height( k1 -> left ) = 0
[avltree_insert singel right rotation]
[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
74 is root, the type of node is ROOT, precursor 30, successor 84.
30 is 74's left child, the type of node is LEAF, successor 74.
84 is 74's right child, the type of node is LEAF, precursor 74.

[Main]
74 is root, the type of node is ROOT, precursor 30, successor 84.
30 is 74's left child, the type of node is LEAF, successor 74.
84 is 74's right child, the type of node is LEAF, precursor 74.

n -> key = 26
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 30, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 74.
26 is 30's left child, the type of node is LEAF, successor 30.
84 is 74's right child, the type of node is LEAF, precursor 74.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 1
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 26( 0x22111c0 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[Main]
74 is root, the type of node is ROOT, precursor 30, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 74.
26 is 30's left child, the type of node is LEAF, successor 30.
84 is 74's right child, the type of node is LEAF, precursor 74.

n -> key = 35
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 35, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
35 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
84 is 74's right child, the type of node is LEAF, precursor 74.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 1
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 35( 0x2211040 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[Main]
74 is root, the type of node is ROOT, precursor 35, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
35 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
84 is 74's right child, the type of node is LEAF, precursor 74.

n -> key = 89
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 35, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
35 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.
[avltree_insert] get_node_height( t -> left ) = 2
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 89( 0x2211100 )
[lost_balance_node] tmp -> key = 84( 0x2211070 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[Main]
74 is root, the type of node is ROOT, precursor 35, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
35 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.

n -> key = 22
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 35, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
35 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 22( 0x2211190 )
[lost_balance_node] tmp -> key = 26( 0x22111c0 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[Main]
74 is root, the type of node is ROOT, precursor 35, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
35 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.

n -> key = 63
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
35 is 30's right child, the type of node is TRUNK, precursor 30, successor 63.
63 is 35's right child, the type of node is LEAF, precursor 35, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 63( 0x2211160 )
[lost_balance_node] tmp -> key = 35( 0x2211040 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[Main]
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
35 is 30's right child, the type of node is TRUNK, precursor 30, successor 63.
63 is 35's right child, the type of node is LEAF, precursor 35, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.

n -> key = 59
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
35 is 30's right child, the type of node is TRUNK, precursor 30, successor 59.
63 is 35's right child, the type of node is TRUNK, precursor 59, successor 74.
59 is 63's left child, the type of node is LEAF, precursor 35, successor 63.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.
[avltree_insert] get_node_height( t -> left ) = 4
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 59( 0x2211010 )
[lost_balance_node] tmp -> key = 63( 0x2211160 )
[lost_balance_node] tmp -> key = 35( 0x2211040 )
[lost_balance_node]  found lost blance Node address is 0x2211040, value is 35
====================> k1 -> key  = 35
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 1
====================> get_node_height( k1 -> left ) = 0
[avltree_insert right left rotation]
[right_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 1
[right_rotation]  type = 4
[right_left_rotation, right_rotation] k1_has_right = 0
[right_left_rotation, right_rotation]  k1 -> key = 63, k1 address = 0x2211160
[right_left_rotation, right_rotation]  k2 -> key = 59, k2 address = 0x2211010
[right_left_rotation, right_rotation] stat = 0
[right_left_rotation, right_rotation] ret -> key = 59( 0x2211010 )
[right_left_rotation, right_rotation]
59 is 59's right child, the type of node is TRUNK, precursor 30, successor 63.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.

============[right_left_rotation]============
35 is 35's right child, the type of node is TRUNK, precursor 30, successor 59.
59 is 35's right child, the type of node is TRUNK, precursor 35, successor 63.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.

[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
59 is 59's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.

[Main]
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 84's right child, the type of node is LEAF, precursor 84.

n -> key = 85
[avltree_insert, bstree_insert]
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
84 is 74's right child, the type of node is TRUNK, precursor 74, successor 85.
89 is 84's right child, the type of node is TRUNK, precursor 85.
85 is 89's left child, the type of node is LEAF, precursor 84, successor 89.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 3
[avltree_insert] t = 0x22110d0, t -> key = 74
[lost_balance_node] tmp -> key = 85( 0x2211130 )
[lost_balance_node] tmp -> key = 89( 0x2211100 )
[lost_balance_node] tmp -> key = 84( 0x2211070 )
[lost_balance_node]  found lost blance Node address is 0x2211070, value is 84
====================> k1 -> key  = 84
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 1
====================> get_node_height( k1 -> left ) = 0
[avltree_insert right left rotation]
[right_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 1
[right_rotation]  type = 4
[right_left_rotation, right_rotation] k1_has_right = 0
[right_left_rotation, right_rotation]  k1 -> key = 89, k1 address = 0x2211100
[right_left_rotation, right_rotation]  k2 -> key = 85, k2 address = 0x2211130
[right_left_rotation, right_rotation] stat = 0
[right_left_rotation, right_rotation] ret -> key = 85( 0x2211130 )
[right_left_rotation, right_rotation]
85 is 85's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.

============[right_left_rotation]============
84 is 84's right child, the type of node is TRUNK, precursor 74, successor 85.
85 is 84's right child, the type of node is TRUNK, precursor 84, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.

[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
85 is 85's right child, the type of node is TRUNK, precursor 84, successor 89.
84 is 85's left child, the type of node is LEAF, precursor 74, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.

[Main]
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 84, successor 89.
84 is 85's left child, the type of node is LEAF, precursor 74, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.

idx = 2, key = 84
===============================> Before delete Node( 84 )
74 is root, the type of node is ROOT, precursor 63, successor 84.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 84, successor 89.
84 is 85's left child, the type of node is LEAF, precursor 74, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 85
84 's type 4
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 85( 0x2211130 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
===============================> After delete Node( 84 ):
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 6, key = 22
===============================> Before delete Node( 22 )
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is TRUNK, precursor 22, successor 30.
22 is 26's left child, the type of node is LEAF, successor 26.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 26
22 's type 4
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 26( 0x22111c0 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
===============================> After delete Node( 22 ):
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 4, key = 35
===============================> Before delete Node( 35 )
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 35.
26 is 30's left child, the type of node is LEAF, successor 30.
59 is 30's right child, the type of node is TRUNK, precursor 35, successor 63.
35 is 59's left child, the type of node is LEAF, precursor 30, successor 59.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 59
35 's type 4
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 59.
26 is 30's left child, the type of node is LEAF, successor 30.
59 is 30's right child, the type of node is TRUNK, precursor 30, successor 63.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 59( 0x2211010 )
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
===============================> After delete Node( 35 ):
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 59.
26 is 30's left child, the type of node is LEAF, successor 30.
59 is 30's right child, the type of node is TRUNK, precursor 30, successor 63.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 8, key = 59
===============================> Before delete Node( 59 )
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 59.
26 is 30's left child, the type of node is LEAF, successor 30.
59 is 30's right child, the type of node is TRUNK, precursor 30, successor 63.
63 is 59's right child, the type of node is LEAF, precursor 59, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 30
59 's type 3
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 63.
26 is 30's left child, the type of node is LEAF, successor 30.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
===============================> After delete Node( 59 ):
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 63.
26 is 30's left child, the type of node is LEAF, successor 30.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 3, key = 26
===============================> Before delete Node( 26 )
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, precursor 26, successor 63.
26 is 30's left child, the type of node is LEAF, successor 30.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 30
26 's type 4
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, successor 63.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
===============================> After delete Node( 26 ):
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, successor 63.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 6, key = 22
===============================> Before delete Node( 22 )
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, successor 63.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] the Node( 22 ) is not found!
===============================> After delete Node( 22 ):
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, successor 63.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 7, key = 63
===============================> Before delete Node( 63 )
74 is root, the type of node is ROOT, precursor 63, successor 85.
30 is 74's left child, the type of node is TRUNK, successor 63.
63 is 30's right child, the type of node is LEAF, precursor 30, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 30
63 's type 4
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 30( 0x22110a0 )
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
===============================> After delete Node( 63 ):
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 3, key = 26
===============================> Before delete Node( 26 )
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] the Node( 26 ) is not found!
===============================> After delete Node( 26 ):
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 2, key = 84
===============================> Before delete Node( 84 )
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] the Node( 84 ) is not found!
===============================> After delete Node( 84 ):
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 0, key = 30
===============================> Before delete Node( 30 )
74 is root, the type of node is ROOT, precursor 30, successor 85.
30 is 74's left child, the type of node is LEAF, successor 74.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 74
30 's type 4
[delete_avltree, bstree_delete]
74 is root, the type of node is ROOT, successor 85.
85 is 74's right child, the type of node is TRUNK, precursor 74, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 74( 0x22110d0 )
[lost_balance_node]  found lost blance Node address is 0x22110d0, value is 74
====================> k1 -> key  = 74
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 0
====================> get_node_height( k1 -> left ) = 0
[delete_avltree singel right rotation]
[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.

===============================> After delete Node( 30 ):
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 6, key = 22
===============================> Before delete Node( 22 )
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] the Node( 22 ) is not found!
===============================> After delete Node( 22 ):
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 6, key = 22
===============================> Before delete Node( 22 )
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] the Node( 22 ) is not found!
===============================> After delete Node( 22 ):
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 1, key = 74
===============================> Before delete Node( 74 )
85 is root, the type of node is ROOT, precursor 74, successor 89.
74 is 85's left child, the type of node is LEAF, successor 85.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] n_father -> key = 85
74 's type 4
[delete_avltree, bstree_delete]
85 is root, the type of node is ROOT, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[lost_balance_node] tmp -> key = 85( 0x2211130 )
===============================> After delete Node( 74 ):
85 is root, the type of node is ROOT, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 3, key = 26
===============================> Before delete Node( 26 )
85 is root, the type of node is ROOT, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
[delete_avltree] the Node( 26 ) is not found!
===============================> After delete Node( 26 ):
85 is root, the type of node is ROOT, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
idx = 9, key = 85
===============================> Before delete Node( 85 )
85 is root, the type of node is ROOT, successor 89.
89 is 85's right child, the type of node is LEAF, precursor 85.
85 's type 2
[delete_avltree, bstree_delete]
89 is a single node.
===============================> After delete Node( 85 ):
89 is a single node.
idx = 8, key = 59
===============================> Before delete Node( 59 )
89 is a single node.
[delete_avltree] the Node( 59 ) is not found!
===============================> After delete Node( 59 ):
89 is a single node.
idx = 7, key = 63
===============================> Before delete Node( 63 )
89 is a single node.
[delete_avltree] the Node( 63 ) is not found!
===============================> After delete Node( 63 ):
89 is a single node.
idx = 6, key = 22
===============================> Before delete Node( 22 )
89 is a single node.
[delete_avltree] the Node( 22 ) is not found!
===============================> After delete Node( 22 ):
89 is a single node.
idx = 0, key = 30
===============================> Before delete Node( 30 )
89 is a single node.
[delete_avltree] the Node( 30 ) is not found!
===============================> After delete Node( 30 ):
89 is a single node.
idx = 4, key = 35
===============================> Before delete Node( 35 )
89 is a single node.
[delete_avltree] the Node( 35 ) is not found!
===============================> After delete Node( 35 ):
89 is a single node.
idx = 4, key = 35
===============================> Before delete Node( 35 )
89 is a single node.
[delete_avltree] the Node( 35 ) is not found!
===============================> After delete Node( 35 ):
89 is a single node.
idx = 1, key = 74
===============================> Before delete Node( 74 )
89 is a single node.
[delete_avltree] the Node( 74 ) is not found!
===============================> After delete Node( 74 ):
89 is a single node.
idx = 5, key = 89
===============================> Before delete Node( 89 )
89 is a single node.
89 's type 1
===============================> After delete Node( 89 ):
the AvlTree is empty!
==========array[3]==========
Input Numbers : 20 25 70 61 98 49 39 26 82 66 

n -> key = 20
[avltree_insert, bstree_insert]
20 is a single node.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 0
[avltree_insert] t = 0x2211130, t -> key = 20
[lost_balance_node] tmp -> key = 20( 0x2211130 )
[Main]
20 is a single node.

n -> key = 25
[avltree_insert, bstree_insert]
20 is root, the type of node is ROOT, successor 25.
25 is 20's right child, the type of node is LEAF, precursor 20.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 1
[avltree_insert] t = 0x2211130, t -> key = 20
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[lost_balance_node] tmp -> key = 20( 0x2211130 )
[Main]
20 is root, the type of node is ROOT, successor 25.
25 is 20's right child, the type of node is LEAF, precursor 20.

n -> key = 70
[avltree_insert, bstree_insert]
20 is root, the type of node is ROOT, successor 25.
25 is 20's right child, the type of node is TRUNK, precursor 20, successor 70.
70 is 25's right child, the type of node is LEAF, precursor 25.
[avltree_insert] get_node_height( t -> left ) = 0
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211130, t -> key = 20
[lost_balance_node] tmp -> key = 70( 0x22110d0 )
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[lost_balance_node] tmp -> key = 20( 0x2211130 )
[lost_balance_node]  found lost blance Node address is 0x2211130, value is 20
====================> k1 -> key  = 20
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 0
====================> get_node_height( k1 -> left ) = 0
[avltree_insert singel right rotation]
[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
25 is root, the type of node is ROOT, precursor 20, successor 70.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is LEAF, precursor 25.

[Main]
25 is root, the type of node is ROOT, precursor 20, successor 70.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is LEAF, precursor 25.

n -> key = 61
[avltree_insert, bstree_insert]
25 is root, the type of node is ROOT, precursor 20, successor 61.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is TRUNK, precursor 61.
61 is 70's left child, the type of node is LEAF, precursor 25, successor 70.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211100, t -> key = 25
[lost_balance_node] tmp -> key = 61( 0x22110a0 )
[lost_balance_node] tmp -> key = 70( 0x22110d0 )
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[Main]
25 is root, the type of node is ROOT, precursor 20, successor 61.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is TRUNK, precursor 61.
61 is 70's left child, the type of node is LEAF, precursor 25, successor 70.

n -> key = 98
[avltree_insert, bstree_insert]
25 is root, the type of node is ROOT, precursor 20, successor 61.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is TRUNK, precursor 61, successor 98.
61 is 70's left child, the type of node is LEAF, precursor 25, successor 70.
98 is 70's right child, the type of node is LEAF, precursor 70.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x2211100, t -> key = 25
[lost_balance_node] tmp -> key = 98( 0x2211010 )
[lost_balance_node] tmp -> key = 70( 0x22110d0 )
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[Main]
25 is root, the type of node is ROOT, precursor 20, successor 61.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is TRUNK, precursor 61, successor 98.
61 is 70's left child, the type of node is LEAF, precursor 25, successor 70.
98 is 70's right child, the type of node is LEAF, precursor 70.

n -> key = 49
[avltree_insert, bstree_insert]
25 is root, the type of node is ROOT, precursor 20, successor 49.
20 is 25's left child, the type of node is LEAF, successor 25.
70 is 25's right child, the type of node is TRUNK, precursor 61, successor 98.
61 is 70's left child, the type of node is TRUNK, precursor 49, successor 70.
49 is 61's left child, the type of node is LEAF, precursor 25, successor 61.
98 is 70's right child, the type of node is LEAF, precursor 70.
[avltree_insert] get_node_height( t -> left ) = 1
[avltree_insert] get_node_height( t -> right ) = 3
[avltree_insert] t = 0x2211100, t -> key = 25
[lost_balance_node] tmp -> key = 49( 0x22111c0 )
[lost_balance_node] tmp -> key = 61( 0x22110a0 )
[lost_balance_node] tmp -> key = 70( 0x22110d0 )
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[lost_balance_node]  found lost blance Node address is 0x2211100, value is 25
====================> k1 -> key  = 25
====================> get_node_height( k1 -> left  ) = 1
====================> get_node_height( k1 -> right  ) = 3
====================> get_node_height( k1 -> right -> left ) = 2
====================> get_node_height( k1 -> left ) = 1
[avltree_insert right left rotation]
[right_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 1
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 1
[right_rotation]  type = 4
[right_left_rotation, right_rotation] k1_has_right = 1
[right_left_rotation, right_rotation]  k1 -> key = 70, k1 address = 0x22110d0
[right_left_rotation, right_rotation]  k2 -> key = 61, k2 address = 0x22110a0
[right_left_rotation, right_rotation] stat = 0
[right_left_rotation, right_rotation] ret -> key = 61( 0x22110a0 )
[right_left_rotation, right_rotation]
61 is 61's right child, the type of node is TRUNK, precursor 49, successor 70.
49 is 61's left child, the type of node is LEAF, successor 61.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.

============[right_left_rotation]============
25 is root, the type of node is ROOT, precursor 20, successor 49.
20 is 25's left child, the type of node is LEAF, successor 25.
61 is 25's right child, the type of node is TRUNK, precursor 49, successor 70.
49 is 61's left child, the type of node is LEAF, precursor 25, successor 61.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.

[left_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 3
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 49.
20 is 25's left child, the type of node is LEAF, successor 25.
49 is 25's right child, the type of node is LEAF, precursor 25, successor 61.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.

[Main]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 49.
20 is 25's left child, the type of node is LEAF, successor 25.
49 is 25's right child, the type of node is LEAF, precursor 25, successor 61.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.

n -> key = 39
[avltree_insert, bstree_insert]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 39.
20 is 25's left child, the type of node is LEAF, successor 25.
49 is 25's right child, the type of node is TRUNK, precursor 39, successor 61.
39 is 49's left child, the type of node is LEAF, precursor 25, successor 49.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110a0, t -> key = 61
[lost_balance_node] tmp -> key = 39( 0x2211160 )
[lost_balance_node] tmp -> key = 49( 0x22111c0 )
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[lost_balance_node] tmp -> key = 61( 0x22110a0 )
[Main]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 39.
20 is 25's left child, the type of node is LEAF, successor 25.
49 is 25's right child, the type of node is TRUNK, precursor 39, successor 61.
39 is 49's left child, the type of node is LEAF, precursor 25, successor 49.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.

n -> key = 26
[avltree_insert, bstree_insert]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
49 is 25's right child, the type of node is TRUNK, precursor 39, successor 61.
39 is 49's left child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.
[avltree_insert] get_node_height( t -> left ) = 4
[avltree_insert] get_node_height( t -> right ) = 2
[avltree_insert] t = 0x22110a0, t -> key = 61
[lost_balance_node] tmp -> key = 26( 0x2211040 )
[lost_balance_node] tmp -> key = 39( 0x2211160 )
[lost_balance_node] tmp -> key = 49( 0x22111c0 )
[lost_balance_node]  found lost blance Node address is 0x22111c0, value is 49
====================> k1 -> key  = 49
====================> get_node_height( k1 -> left  ) = 2
====================> get_node_height( k1 -> right  ) = 0
====================> get_node_height( k1 -> left -> right ) = 0
====================> get_node_height( k1 -> right ) = 0
[avltree_insert singel left rotation]
[right_rotation] get_node_height( k1 -> right ) = 2, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 2
[right_rotation]  type = 4
[right_rotation,  singel] k1 -> key = 49, k2 -> key = 39
[right_rotation]
39 is 39's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.

[Main]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 70's right child, the type of node is LEAF, precursor 70.

n -> key = 82
[avltree_insert, bstree_insert]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
70 is 61's right child, the type of node is TRUNK, precursor 61, successor 82.
98 is 70's right child, the type of node is TRUNK, precursor 82.
82 is 98's left child, the type of node is LEAF, precursor 70, successor 98.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 3
[avltree_insert] t = 0x22110a0, t -> key = 61
[lost_balance_node] tmp -> key = 82( 0x2211190 )
[lost_balance_node] tmp -> key = 98( 0x2211010 )
[lost_balance_node] tmp -> key = 70( 0x22110d0 )
[lost_balance_node]  found lost blance Node address is 0x22110d0, value is 70
====================> k1 -> key  = 70
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 1
====================> get_node_height( k1 -> left ) = 0
[avltree_insert right left rotation]
[right_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 0
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 1
[right_rotation]  type = 4
[right_left_rotation, right_rotation] k1_has_right = 0
[right_left_rotation, right_rotation]  k1 -> key = 98, k1 address = 0x2211010
[right_left_rotation, right_rotation]  k2 -> key = 82, k2 address = 0x2211190
[right_left_rotation, right_rotation] stat = 0
[right_left_rotation, right_rotation] ret -> key = 82( 0x2211190 )
[right_left_rotation, right_rotation]
82 is 82's right child, the type of node is TRUNK, precursor 61, successor 98.
98 is 82's right child, the type of node is LEAF, precursor 82.

============[right_left_rotation]============
70 is 70's right child, the type of node is TRUNK, precursor 61, successor 82.
82 is 70's right child, the type of node is TRUNK, precursor 70, successor 98.
98 is 82's right child, the type of node is LEAF, precursor 82.

[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 2
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 2
[left_rotation]
82 is 82's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is LEAF, precursor 61, successor 82.
98 is 82's right child, the type of node is LEAF, precursor 82.

[Main]
61 is root, the type of node is ROOT, precursor 49, successor 70.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is LEAF, precursor 61, successor 82.
98 is 82's right child, the type of node is LEAF, precursor 82.

n -> key = 66
[avltree_insert, bstree_insert]
61 is root, the type of node is ROOT, precursor 49, successor 66.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is TRUNK, precursor 66, successor 82.
66 is 70's left child, the type of node is LEAF, precursor 61, successor 70.
98 is 82's right child, the type of node is LEAF, precursor 82.
[avltree_insert] get_node_height( t -> left ) = 3
[avltree_insert] get_node_height( t -> right ) = 3
[avltree_insert] t = 0x22110a0, t -> key = 61
[lost_balance_node] tmp -> key = 66( 0x2211070 )
[lost_balance_node] tmp -> key = 70( 0x22110d0 )
[lost_balance_node] tmp -> key = 82( 0x2211190 )
[lost_balance_node] tmp -> key = 61( 0x22110a0 )
[Main]
61 is root, the type of node is ROOT, precursor 49, successor 66.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is TRUNK, precursor 66, successor 82.
66 is 70's left child, the type of node is LEAF, precursor 61, successor 70.
98 is 82's right child, the type of node is LEAF, precursor 82.

idx = 0, key = 20
===============================> Before delete Node( 20 )
61 is root, the type of node is ROOT, precursor 49, successor 66.
25 is 61's left child, the type of node is TRUNK, precursor 20, successor 26.
20 is 25's left child, the type of node is LEAF, successor 25.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is TRUNK, precursor 66, successor 82.
66 is 70's left child, the type of node is LEAF, precursor 61, successor 70.
98 is 82's right child, the type of node is LEAF, precursor 82.
[delete_avltree] n_father -> key = 25
20 's type 4
[delete_avltree, bstree_delete]
61 is root, the type of node is ROOT, precursor 49, successor 66.
25 is 61's left child, the type of node is TRUNK, successor 26.
39 is 25's right child, the type of node is TRUNK, precursor 26, successor 49.
26 is 39's left child, the type of node is LEAF, precursor 25, successor 39.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is TRUNK, precursor 66, successor 82.
66 is 70's left child, the type of node is LEAF, precursor 61, successor 70.
98 is 82's right child, the type of node is LEAF, precursor 82.
[lost_balance_node] tmp -> key = 25( 0x2211100 )
[lost_balance_node]  found lost blance Node address is 0x2211100, value is 25
====================> k1 -> key  = 25
====================> get_node_height( k1 -> left  ) = 0
====================> get_node_height( k1 -> right  ) = 2
====================> get_node_height( k1 -> right -> left ) = 1
====================> get_node_height( k1 -> left ) = 0
[delete_avltree right left rotation]
[right_rotation] get_node_height( k1 -> right ) = 1, get_node_height( k1 -> left ) = 1
[right_rotation] get_node_height( k1 -> left ) - get_node_height( k1 -> right ) = 0
[right_rotation]  type = 4
[right_left_rotation, right_rotation] k1_has_right = 1
[right_left_rotation, right_rotation]  k1 -> key = 39, k1 address = 0x2211160
[right_left_rotation, right_rotation]  k2 -> key = 26, k2 address = 0x2211040
[right_left_rotation, right_rotation] stat = 0
[right_left_rotation, right_rotation] ret -> key = 26( 0x2211040 )
[right_left_rotation, right_rotation]
26 is 26's right child, the type of node is TRUNK, successor 39.
39 is 26's right child, the type of node is TRUNK, precursor 26, successor 49.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.

============[right_left_rotation]============
25 is 25's right child, the type of node is TRUNK, successor 26.
26 is 25's right child, the type of node is TRUNK, precursor 25, successor 39.
39 is 26's right child, the type of node is TRUNK, precursor 26, successor 49.
49 is 39's right child, the type of node is LEAF, precursor 39, successor 61.

[left_rotation] get_node_height( k1 -> right ) = 0, get_node_height( k1 -> left ) = 3
[left_rotation] get_node_height( k1 -> right ) - get_node_height( k1 -> left ) = 3
[left_right_rotation, left_rotation] k2 -> left = (nil)
[left_right_rotation, left_rotation] k1_has_left = 0
[left_right_rotation, left_rotation] k1 -> key = 25, k1 address = 0x2211100
[left_right_rotation, left_rotation] k2 -> key = 26, k2 address = 0x2211040
[left_right_rotation, left_rotation] stat = 0
[left_right_rotation, left_rotation] ret -> left = 0x2211100
[left_right_rotation, left_rotation] k2 -> left -> key = 25
[left_right_rotation, left_rotation] ret -> key = 26( 0x2211040 )
[left_right_rotation, left_rotation]
26 is 26's right child, the type of node is TRUNK, precursor 25, successor 39.
25 is 26's left child, the type of node is LEAF, successor 26.
39 is 26's right child, the type of node is TRUNK, precursor 26, successor 49.
49 is 39's right child, the type of node is LEAF, precursor 39.

===============================> After delete Node( 20 ):
61 is root, the type of node is ROOT, precursor 25, successor 66.
25 is 61's left child, the type of node is LEAF, successor 26.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is TRUNK, precursor 66, successor 82.
66 is 70's left child, the type of node is LEAF, precursor 61, successor 70.
98 is 82's right child, the type of node is LEAF, precursor 82.
idx = 3, key = 61
===============================> Before delete Node( 61 )
61 is root, the type of node is ROOT, precursor 25, successor 66.
25 is 61's left child, the type of node is LEAF, successor 26.
82 is 61's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is TRUNK, precursor 66, successor 82.
66 is 70's left child, the type of node is LEAF, precursor 61, successor 70.
98 is 82's right child, the type of node is LEAF, precursor 82.
61 's type 2
[delete_avltree, bstree_delete]
66 is root, the type of node is ROOT, precursor 25, successor 70.
25 is 66's left child, the type of node is LEAF, successor 26.
82 is 66's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is LEAF, precursor 66, successor 82.
98 is 82's right child, the type of node is LEAF, precursor 82.
===============================> After delete Node( 61 ):
66 is root, the type of node is ROOT, precursor 25, successor 70.
25 is 66's left child, the type of node is LEAF, successor 26.
82 is 66's right child, the type of node is TRUNK, precursor 70, successor 98.
70 is 82's left child, the type of node is LEAF, precursor 66, successor 82.
98 is 82's right child, the type of node is LEAF, prec